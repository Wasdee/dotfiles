# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
    *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
    xterm*|rxvt*)
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
    *)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'
    
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# . "$HOME/.asdf/asdf.sh"
# . "$HOME/.asdf/completions/asdf.bash"
# This only works under interactive shells
eval "$($HOME/.local/share/rtx/bin/rtx activate bash)"
# this works under non-interactive shells
export PATH="$HOME/.local/share/rtx/shims:$PATH"

# for pipx completion
export PATH="$PATH:$HOME/.local/bin"


# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  elif [ -d ~/.bash_completions ]; then
    for file in ~/.bash_completions/*; do
      echo "Loading completion file $file"
      . "$file"
    done
  fi
fi

if [ -d ~/.bash_completions ]; then
    for file in ~/.bash_completions/*; do
        # echo "Loading completion file $file"
        . "$file"
    done
fi



export FLYCTL_INSTALL="$HOME/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"

{{ if and (eq .chezmoi.os "linux") (.chezmoi.kernel.osrelease | lower | contains "microsoft") }}
# WSL-specific code
export BROWSER=/usr/bin/wslview
alias open="/usr/bin/wslview"

export DOCKER_HOST=unix:///var/run/docker.sock
export DOCKER_HOST_PATH="/var/run/docker.sock"
{{ end }}

export PATH=/usr/bin:$PATH


{{ if eq .site "server" }}
export DOCKER_HOST=unix:///run/user/$UID/docker.sock
export DOCKER_HOST_PATH=${DOCKER_HOST#unix://}
{{ end }}


export EDITOR="code --wait"
export SUDO_EDITOR="code --wait"

export PATH="$PATH:/snap/bin"
export PATH="$PATH:$HOME/.cargo/bin"

export PNPM_HOME="$HOME/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac


eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# run here since it checks for the existence cmd 
if command -v zoxide &> /dev/null; then
    eval "$(zoxide init bash)"
fi

if command -v mcfly &> /dev/null; then
    eval "$(mcfly init bash)"
fi

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

if  rtx list flutter &> /dev/null ; then
    export FLUTTER_ROOT="$(rtx where flutter)"
fi

if command -v thefuck &> /dev/null; then
    eval $(thefuck --alias)
fi

# fix poetry keyring https://github.com/python-poetry/poetry/issues/1917
export PYTHON_KEYRING_BACKEND=keyring.backends.fail.Keyring

export DOCKER_HOST=unix:///run/user/1000/docker.sock

export RAN_BASHRC=1

if command -v starship &> /dev/null
then 
    eval "$(starship init bash)"
fi

